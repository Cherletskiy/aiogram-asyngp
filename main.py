import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from db_init import database, init_db

import logging
from logging.handlers import RotatingFileHandler

import random
import configparser

from crud import add_user, add_base_cards, add_card, get_cards, delete_card_db, get_random_card, update_stats, get_user_stats


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("app.log", maxBytes=1024*1024, backupCount=50, encoding="utf-8", delay=True),
        logging.StreamHandler()
    ]
)


# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = configparser.ConfigParser()
config.read('settings.ini')
bot_token = config["tokens"]["bot_token"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher()
bot = Bot(token=bot_token)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
base_keyboard = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")],
        [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üìù"), types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üìù")],
        [types.KeyboardButton(text="üìö –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç (—Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏) üìö")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
cancel_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ])


@dp.message(Command("start"))
async def start_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ add_user –∏–∑ crud.py."""
    await add_user(message.from_user.id, message.from_user.username, message.from_user.full_name)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name} üëã\n\n–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòä\n\n–í—ã–±–µ—Ä–∏ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', reply_markup=base_keyboard)

    logging.info(f"User {message.from_user.id} started the bot")


class TestState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    waiting_for_answer = State()


@dp.message(F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_card(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    data = await state.get_data()
    skipped_answers = data.get("skipped_answers", 0) + 1
    await state.update_data(skipped_answers=skipped_answers)

    await send_card(message, state)
    logging.info(f"User {message.from_user.id} skipped a card")


@dp.message(F.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def end_test(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    data = await state.get_data()

    correct_answers = data.get("correct_answers", 0)
    incorrect_answers = data.get("incorrect_answers", 0)
    skipped_answers = data.get("skipped_answers", 0)

    total_questions = correct_answers + incorrect_answers
    accuracy = round((correct_answers / total_questions) * 100, 2) if total_questions > 0 else 0

    result_message = (
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:*\n\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{correct_answers}*\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{incorrect_answers}*\n"
        f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: *{skipped_answers}*\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å (–±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤): *{accuracy}%*\n"
    )

    await message.answer(result_message, reply_markup=base_keyboard)
    await state.clear()

    logging.info(f"User {message.from_user.id} finished the test")


@dp.message(F.text == "üìö –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç (—Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏) üìö")
async def send_card(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
    –ò–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_random_card –∏–∑ crud.py –≤ data –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è target_card.id, target_card.translate, target_card.target_word, answer_words (—Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞)."""
    user_id = message.from_user.id

    data = await get_random_card(user_id)

    if not data:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    card_id, translate, target_word, words = data
    words.append(target_word)
    random.shuffle(words)

    await state.update_data(
        card_id=card_id,
        translate=translate,
        target_word=target_word,
        words=words
    )

    await message.answer(
        f"–í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: \n'{translate}'",
        reply_markup=types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [types.KeyboardButton(text=word) for word in words[:2]],
                [types.KeyboardButton(text=word) for word in words[2:]],
                [types.KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), types.KeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
            ]
        )
    )

    await state.set_state(TestState.waiting_for_answer)

    logging.info(f"User {message.from_user.id} started the test")


@dp.message(TestState.waiting_for_answer)
async def check_answer(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é update_stats –∏–∑ crud.py.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É."""
    user_answer = message.text
    user_id = message.from_user.id

    data = await state.get_data()
    target_word = data["target_word"]

    if "correct_answers" not in data:
        await state.update_data(correct_answers=0, incorrect_answers=0, skipped_answers=0)
        data = await state.get_data()

    correct_answers = data["correct_answers"]
    incorrect_answers = data["incorrect_answers"]

    if user_answer == target_word:
        response_list = ["‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", "‚úÖ –ú–æ–ª–æ–¥–µ—Ü!", "‚úÖ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ!"]
        response = random.choice(response_list)
        correct_answers += 1
        await update_stats(user_id, correct=True)
    else:
        response_list = ["‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", "‚ùå –û—à–∏–±–∫–∞!", "‚ùå –ë–ª–∏–∑–∫–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ!", "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"]
        response = f"{random.choice(response_list)} \n\n–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: \n'{target_word}'"
        incorrect_answers += 1
        await update_stats(user_id, correct=False)

    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(correct_answers=correct_answers, incorrect_answers=incorrect_answers)

    await asyncio.sleep(0.05)
    await send_card(message, state)

    logging.info(f"User {message.from_user.id} answered the question correctly {user_answer}, target word: {target_word}" if user_answer == target_word
                 else f"User {message.from_user.id} answered the question incorrectly {user_answer}, target word: {target_word}")


class AddCard(StatesGroup):
    """C–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫."""
    waiting_info = State()


CARD_FIELDS = ["translate", "target_word"]


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üìù")
async def add_card_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    await state.set_state(AddCard.waiting_info)
    await state.update_data(step=0, card_data={})

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:", reply_markup=cancel_keyboard)

    logging.info(f"User {message.from_user.id} started adding a card")


@dp.message(AddCard.waiting_info)
async def process_card_step(message: types.Message, state: FSMContext):
    """ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥. –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î —Å –ø–æ–º–æ—â—å—é add_card –∏–∑ crud.py."""
    data = await state.get_data()
    step = data.get("step", 0)
    card_data = data.get("card_data", {})

    field_name = CARD_FIELDS[step]
    card_data[field_name] = message.text

    step += 1

    if step < len(CARD_FIELDS):
        await state.update_data(step=step, card_data=card_data)
        prompts = ["–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:", "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:"]
        await message.answer(prompts[step], reply_markup=cancel_keyboard)
    else:
        await add_card(message.from_user.id, card_data["translate"], card_data["target_word"])
        await state.clear()
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card_data['translate']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=base_keyboard)

        logging.info(f"User {message.from_user.id} added a card {card_data['translate']}")


class DeleteState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫."""
    waiting_for_card_id = State()


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É üìù")
async def delete_card(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–æ–º–æ—â—å—é get_cards –∏–∑ crud.py.
    –ó–∞—Ç–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    await state.set_state(DeleteState.waiting_for_card_id)

    cards = await get_cards(message.from_user.id)

    if not cards:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=base_keyboard)
        await state.clear()

        logging.warning(f"User {message.from_user.id} tried to delete a card, but they had no cards to delete.")
        return

    await state.update_data(id=[card.id for card in cards])

    cards_string = "ID - –°–ª–æ–≤–æ\n" + "\n".join([f"{card.id} - {card.translate}" for card in cards])
    await message.answer(f"{cards_string}\n\n–£–∫–∞–∂–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ", reply_markup=cancel_keyboard)


@dp.message(DeleteState.waiting_for_card_id)
async def delete_card_process(message: types.Message, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID.
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ —É–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –ë–î —Å –ø–æ–º–æ—â—å—é delete_card_db –∏–∑ crud.py."""
    data = await state.get_data()
    card_id = message.text

    if not await check_value(card_id, data["id"]):
        await asyncio.sleep(0.5)
        await message.answer("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.", reply_markup=cancel_keyboard)

        logging.warning(f"User {message.from_user.id} entered an incorrect card ID for deletion.")
    else:
        await delete_card_db(int(card_id))
        await state.clear()
        await message.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=base_keyboard)

        logging.info(f"User {message.from_user.id} deleted a card with ID {card_id}")


async def check_value(value: str, lst: list):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ delete_card_id.
    ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ lst (–∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    if not value.isdigit():
        return False
    if int(value) not in lst:
        return False
    return True


@dp.callback_query(F.data == "cancel")
async def cancel(query: types.CallbackQuery, state: FSMContext):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    current_state = await state.get_state()

    if current_state is None:
        await query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã!", show_alert=True)
        logging.warning(f"User {query.from_user.id} tried to cancel a non-existent process.")
        return

    await state.clear()

    await query.message.edit_reply_markup(reply_markup=None)

    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await query.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=base_keyboard)

    logging.info(f"User {query.from_user.id} canceled a process {current_state}")


@dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")
async def get_stat(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ò—Ö —á–∏—Å–ª–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç get_user_stats –∏–∑ crud.py."""
    user_id = message.from_user.id

    stats = await get_user_stats(user_id)

    if stats[0] and stats[1]:
        correct = stats[0]
        incorrect = stats[1]
        total = correct + incorrect

        accuracy = round((correct / total) * 100, 2) if total > 0 else 0

        result_message = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:*\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{correct}*\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{incorrect}*\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: *{accuracy}%*\n"
        )

        await message.answer(result_message, reply_markup=base_keyboard)

        logging.info(f"User {user_id} got statistics: {result_message}")
    else:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=base_keyboard)

        logging.warning(f"No statistics found for user {user_id}")


@dp.message()
async def command(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. \n–í–æ—Å–ø–æ–ª—å–∑—É—Ç–µ—Å—å –º–µ–Ω—é.", reply_markup=base_keyboard)

    logging.warning(f"User {message.from_user.id} entered an unknown command: {message.text}")


async def main():
    await database.connect()
    await init_db()
    await add_base_cards()
    try:
        await dp.start_polling(bot)
    finally:
        await database.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
